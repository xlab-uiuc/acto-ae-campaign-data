---------- INPUT DELTA  ----------
{
      "dictionary_item_added": {
            "root['spec']['sharding']['mongos']['podDisruptionBudget']['minAvailable']": {
                  "prev": "NotPresent",
                  "curr": 4,
                  "path": [
                        "spec",
                        "sharding",
                        "mongos",
                        "podDisruptionBudget",
                        "minAvailable"
                  ]
            }
      }
}
---------- SYSTEM DELTA ----------
{
      "pod": {},
      "deployment_pods": {},
      "stateful_set": {},
      "deployment": {},
      "config_map": {},
      "service": {},
      "service_account": {},
      "pvc": {},
      "cronjob": {},
      "ingress": {},
      "network_policy": {},
      "pod_disruption_budget": {},
      "secret": {},
      "endpoints": {},
      "job": {},
      "role": {},
      "role_binding": {},
      "custom_resource_spec": {
            "dictionary_item_added": {
                  "root['sharding']['mongos']['podDisruptionBudget']['minAvailable']": {
                        "prev": "NotPresent",
                        "curr": 4,
                        "path": [
                              "sharding",
                              "mongos",
                              "podDisruptionBudget",
                              "minAvailable"
                        ]
                  }
            }
      },
      "custom_resource_status": {
            "iterable_item_added": {
                  "root['conditions'][8][lastTransitionTime]": {
                        "prev": "NotPresent",
                        "curr": "2023-03-31T15:56:56Z",
                        "path": [
                              "conditions",
                              8,
                              "lastTransitionTime"
                        ]
                  },
                  "root['conditions'][8][message]": {
                        "prev": "NotPresent",
                        "curr": "reconcile PodDisruptionBudget for mongos: PodDisruptionBudget.policy \"test-cluster-mongos-\" is invalid: spec: Invalid value: policy.PodDisruptionBudgetSpec{MinAvailable:(*intstr.IntOrString)(0xc0106edba0), Selector:(*v1.LabelSelector)(0xc0106edbc0), MaxUnavailable:(*intstr.IntOrString)(0xc0106edbe0)}: minAvailable and maxUnavailable cannot be both set",
                        "path": [
                              "conditions",
                              8,
                              "message"
                        ]
                  },
                  "root['conditions'][8][reason]": {
                        "prev": "NotPresent",
                        "curr": "ErrorReconcile",
                        "path": [
                              "conditions",
                              8,
                              "reason"
                        ]
                  },
                  "root['conditions'][8][status]": {
                        "prev": "NotPresent",
                        "curr": "True",
                        "path": [
                              "conditions",
                              8,
                              "status"
                        ]
                  },
                  "root['conditions'][8][type]": {
                        "prev": "NotPresent",
                        "curr": "error",
                        "path": [
                              "conditions",
                              8,
                              "type"
                        ]
                  }
            },
            "dictionary_item_added": {
                  "root['message']": {
                        "prev": "NotPresent",
                        "curr": "Error: reconcile PodDisruptionBudget for mongos: PodDisruptionBudget.policy \"test-cluster-mongos-\" is invalid: spec: Invalid value: policy.PodDisruptionBudgetSpec{MinAvailable:(*intstr.IntOrString)(0xc0073e9d00), Selector:(*v1.LabelSelector)(0xc0073e9d40), MaxUnavailable:(*intstr.IntOrString)(0xc0073e9d60)}: minAvailable and maxUnavailable cannot be both set",
                        "path": [
                              "message"
                        ]
                  }
            },
            "values_changed": {
                  "root['state']": {
                        "prev": "ready",
                        "curr": "error",
                        "path": [
                              "state"
                        ]
                  }
            }
      }
}