---------- INPUT DELTA  ----------
{}
---------- SYSTEM DELTA ----------
{
      "pod": {},
      "deployment_pods": {},
      "stateful_set": {},
      "deployment": {},
      "config_map": {},
      "service": {},
      "service_account": {},
      "pvc": {},
      "cronjob": {},
      "ingress": {},
      "network_policy": {},
      "pod_disruption_budget": {},
      "secret": {},
      "endpoints": {},
      "job": {},
      "role": {},
      "role_binding": {},
      "custom_resource_spec": {},
      "custom_resource_status": {
            "iterable_item_added": {
                  "root['conditions'][2][lastTransitionTime]": {
                        "prev": "NotPresent",
                        "curr": "2023-03-24T16:09:34Z",
                        "path": [
                              "conditions",
                              2,
                              "lastTransitionTime"
                        ]
                  },
                  "root['conditions'][2][message]": {
                        "prev": "NotPresent",
                        "curr": "PodDisruptionBudget for test-cluster-haproxy: reconcile pdb: PodDisruptionBudget.policy \"test-cluster-haproxy\" is invalid: [spec: Invalid value: policy.PodDisruptionBudgetSpec{MinAvailable:(*intstr.IntOrString)(0xc01560d360), Selector:(*v1.LabelSelector)(0xc01560d380), MaxUnavailable:(*intstr.IntOrString)(0xc01560d3a0)}: minAvailable and maxUnavailable cannot be both set, spec.minAvailable: Invalid value: intstr.IntOrString{Type:1, IntVal:0, StrVal:\"ACTOKEY\"}: a valid percent string must be a numeric string followed by an ending '%' (e.g. '1%',  or '93%', regex used for validation is '[0-9]+%')]",
                        "path": [
                              "conditions",
                              2,
                              "message"
                        ]
                  },
                  "root['conditions'][2][reason]": {
                        "prev": "NotPresent",
                        "curr": "ErrorReconcile",
                        "path": [
                              "conditions",
                              2,
                              "reason"
                        ]
                  },
                  "root['conditions'][2][status]": {
                        "prev": "NotPresent",
                        "curr": "True",
                        "path": [
                              "conditions",
                              2,
                              "status"
                        ]
                  },
                  "root['conditions'][2][type]": {
                        "prev": "NotPresent",
                        "curr": "error",
                        "path": [
                              "conditions",
                              2,
                              "type"
                        ]
                  },
                  "root['conditions'][3][lastTransitionTime]": {
                        "prev": "NotPresent",
                        "curr": "2023-03-24T16:14:39Z",
                        "path": [
                              "conditions",
                              3,
                              "lastTransitionTime"
                        ]
                  },
                  "root['conditions'][3][status]": {
                        "prev": "NotPresent",
                        "curr": "True",
                        "path": [
                              "conditions",
                              3,
                              "status"
                        ]
                  },
                  "root['conditions'][3][type]": {
                        "prev": "NotPresent",
                        "curr": "ready",
                        "path": [
                              "conditions",
                              3,
                              "type"
                        ]
                  }
            }
      }
}